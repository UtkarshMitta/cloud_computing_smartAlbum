AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloud Fomration template for smart album"
Resources:
    FrontBucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "assign3-frontend-${AWS::AccountId}-${AWS::Region}"
            WebsiteConfiguration:
                IndexDocument: index.html
            OwnershipControls:
                Rules:
                    - ObjectOwnership: BucketOwnerEnforced
            PublicAccessBlockConfiguration:
                BlockPublicAcls: false
                IgnorePublicAcls: false
                BlockPublicPolicy: false
                RestrictPublicBuckets: false

    FrontBucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref FrontBucket
            PolicyDocument:
                Version: "2012-10-17"
                Id: "PolicyForPublicWebsiteContent"
                Statement:
                    - Sid: PublicRead
                      Effect: "Allow"
                      Principal: "*"
                      Action: "s3:GetObject"
                      Resource: !Sub "arn:aws:s3:::${FrontBucket}/*"

    PhotosBucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "assign3-photos-utsu2024-${AWS::AccountId}-${AWS::Region}"
            PublicAccessBlockConfiguration:
                BlockPublicAcls: false
                IgnorePublicAcls: false
                BlockPublicPolicy: false
                RestrictPublicBuckets: false

    PhotosBucketPolicy:
        DependsOn: PhotosBucket
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref PhotosBucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Sid: RekognitionAccess
                      Effect: Allow
                      Principal:
                        Service: rekognition.amazonaws.com
                      Action:
                        - s3:PutObject
                        - s3:GetObject
                      Resource: !Join
                        - ""
                        - - "arn:aws:s3:::"
                          - !Ref PhotosBucket
                          - "/*"
                      Condition:
                        StringEquals:
                            aws:SourceAccount: !Ref AWS::AccountId
                    - Sid: PublicRead
                      Effect: "Allow"
                      Principal: "*"
                      Action: 
                        - "s3:GetObject"
                      Resource: !Sub "arn:aws:s3:::${PhotosBucket}/*"

    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub "lambda-execution-role-${AWS::AccountId}-${AWS::Region}"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: LambdaPolicy
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Action:
                            - s3control:PutPublicAccessBlock
                          Resource: "*"
                        - Effect: Allow
                          Action:
                           - s3:PutObject
                           - s3:GetObject
                           - s3:ListBucket
                          Resource:
                            - !Sub "arn:aws:s3:::${PhotosBucket}"
                            - !Sub "arn:aws:s3:::${PhotosBucket}/*"
                        - Effect: Allow
                          Action:
                            - logs:CreateLogGroup
                            - logs:CreateLogStream
                            - logs:PutLogEvents
                          Resource: "*"

    IndexLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "index-photos-cloudFunction"
            Handler: "index-photos-cloudFunction.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "assign3-codestorage"
                S3Key: "index-photos.py.zip"
            Role: !GetAtt LambdaExecutionRole.Arn
            Runtime: "python3.13"

    SearchLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "search-photos-cloudFunction"
            Handler: "search-photos-cloudFunction.lambda_handler"
            Role: !GetAtt LambdaExecutionRole.Arn
            Runtime: "python3.13"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "assign3-codestorage"
                S3Key: "search-photos.py.zip"
            
    ApiGatewayRestApi:
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: PhotosRestApi
            BodyS3Location:
                Bucket: assign3-codestorage
                Key: swagger.yaml

    LambdaPermissionSearch:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref SearchLambda
            Action: lambda:InvokeLambdaFunction
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*"
    
    LambdaPermissionIndex:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref IndexLambda
            Action: lambda:InvokeFunction
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*"

Outputs:
    FrontBucketUrl:
        Value: !Sub "http://${FrontBucket}.s3-website-${AWS::Region}.amazonaws.com"
    
    ApiGatewayUrl:
        Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/photos"